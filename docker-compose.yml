services:
  fastapi:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    ports:
      - "8000:8000"
    volumes:
      - ./artifacts:/app/artifacts  # Use relative path for artifacts
      - ./app.py:/app/app.py       # Use relative path for app.py
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s      # Reduced from 30s
      timeout: 5s       # Reduced from 10s
      retries: 3        # Reduced from 5
      start_period: 15s # Increased from 10s to give app more time to start

  streamlit:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    ports:
      - "8501:8501"
    volumes:
      - ./artifacts:/app/artifacts  # Use relative path for artifacts
      - ./streamlit_app.py:/app/streamlit_app.py  # Use relative path for streamlit_app.py
    depends_on:
      fastapi:
        condition: service_healthy
    networks:
      - app_network

  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    ports:
      - "5001:5001"
    volumes:
      - ./mlflow.db:/app/mlflow.db  # Use relative path for mlflow.db
      - ./artifacts:/app/artifacts  # Use relative path for artifacts
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s

  monitoring:
    build:
      context: .
      dockerfile: Dockerfile.monitoring
    volumes:
      - ./artifacts:/app/artifacts  # Use relative path for artifacts
      - ./monitoring.py:/app/monitoring.py  # Mount monitoring script
    ports:
      - "8502:8502"  # For future monitoring dashboard
    depends_on:
      - mlflow
    networks:
      - app_network
    environment:
      - MONITOR_INTERVAL=60  # Monitor every 60 seconds
      - MONITOR_DURATION=86400  # Run for 24 hours by default

  pipeline:
    build:
      context: .
      dockerfile: Dockerfile.pipeline
    volumes:
      - ./:/app  # Mount the entire project root for all files (simpler for root-level data and scripts)
      - ./artifacts:/app/artifacts  # Specific mount for artifacts
      - ./mlflow.db:/app/mlflow.db  # Specific mount for MLflow DB
      - ./reports:/app/reports      # Add mount for reports directory (for linting/security outputs)
    depends_on:
      mlflow:
        condition: service_started
    networks:
      - app_network

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  # New monitoring services
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    networks:
      - app_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,marcusolsson-json-datasource,natel-plotly-panel,grafana-clock-panel
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - app_network

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  mongo_data:
  prometheus_data:
  grafana_data: