services:
  fastapi:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    ports:
      - "8000:8000"
    volumes:
      - ./artifacts:/app/artifacts  # Use relative path for artifacts
      - ./app.py:/app/app.py       # Use relative path for app.py
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s      # Reduced from 30s
      timeout: 5s       # Reduced from 10s
      retries: 3        # Reduced from 5
      start_period: 15s # Increased from 10s to give app more time to start

  streamlit:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    ports:
      - "8501:8501"
    volumes:
      - ./artifacts:/app/artifacts  # Use relative path for artifacts
      - ./streamlit_app.py:/app/streamlit_app.py  # Use relative path for streamlit_app.py
    depends_on:
      fastapi:
        condition: service_healthy
    networks:
      - app_network

  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    ports:
      - "5001:5001"
    volumes:
      - ./mlflow.db:/app/mlflow.db  # Use relative path for mlflow.db
      - ./artifacts:/app/artifacts  # Use relative path for artifacts
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s

  pipeline:
    build:
      context: .
      dockerfile: Dockerfile.pipeline
    volumes:
      - ./:/app  # Mount the entire project root for all files (simpler for root-level data and scripts)
      - ./artifacts:/app/artifacts  # Specific mount for artifacts
      - ./mlflow.db:/app/mlflow.db  # Specific mount for MLflow DB
      - ./reports:/app/reports      # Add mount for reports directory (for linting/security outputs)
    depends_on:
      mlflow:
        condition: service_started
    networks:
      - app_network

networks:
  app_network:
    driver: bridge