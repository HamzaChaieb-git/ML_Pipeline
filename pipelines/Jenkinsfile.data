pipeline {
    agent any
    
    environment {
        BASE_IMAGE = 'hamzachaieb01/ml-pipeline'
        DATA_IMAGE = 'hamzachaieb01/ml-data'
        TAG = 'latest'
        MLFLOW_TRACKING_URI = 'http://mlflow:5000'
    }
    
    stages {
        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                }
            }
        }
        
        stage('Process Data') {
            steps {
                script {
                    try {
                        sh '''
                            # Run data processing
                            docker run --name data_processor \
                                -e MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI} \
                                --network ml_network \
                                ${BASE_IMAGE}:${TAG} \
                                python -m main prepare_data > /app/data_output.txt 2>&1
                            
                            # Save processed data in new image with logs
                            docker commit data_processor ${DATA_IMAGE}:${TAG}-logs
                            docker push ${DATA_IMAGE}:${TAG}-logs
                            
                            echo "âœ… Data processing complete. Image: ${DATA_IMAGE}:${TAG}-logs"
                        '''
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error "Data processing failed: ${e.message}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            sh '''
                docker rm -f data_processor || true
                docker logout || true
            '''
        }
        success {
            echo "Data pipeline complete. Processed data image: ${DATA_IMAGE}:${TAG}-logs"
        }
    }
}
