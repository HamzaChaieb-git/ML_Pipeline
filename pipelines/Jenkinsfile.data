pipeline {
    agent any
    
    environment {
        BASE_IMAGE = 'hamzachaieb01/ml-pipeline'
        DATA_IMAGE = 'hamzachaieb01/ml-data'
        TAG = 'latest'
    }
    
    stages {
        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                }
            }
        }
        
        stage('Pull Base Image') {
            steps {
                retry(3) {
                    sh 'docker pull ${BASE_IMAGE}:${TAG}'
                }
            }
        }
        
        stage('Process Data') {
            steps {
                script {
                    try {
                        // Create data processor container
                        docker run --name data_processor \
                            ${BASE_IMAGE}:${TAG} \
                            bash -c "python -u -m main prepare_data"
                        
                        // Create /app directory if it doesn’t exist and ensure proper permissions
                        docker exec data_processor mkdir -p /app
                        sh "docker exec data_processor chmod 777 /app"
                        
                        // Save processed data in new image
                        docker commit data_processor ${DATA_IMAGE}:${TAG}-logs
                        docker push ${DATA_IMAGE}:${TAG}-logs
                        
                        echo "✅ Data processing complete. Image: ${DATA_IMAGE}:${TAG}-logs"
                    } catch (Exception e) {
                        echo "Error during data processing: ${e.message}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
    }
    
    post {
        always {
            sh '''
                docker rm -f data_processor || true
                docker logout || true
            '''
        }
        success {
            echo "Data pipeline complete. Processed data image: ${DATA_IMAGE}:${TAG}-logs"
        }
        unstable {
            echo "Data processing completed with issues, but pipeline finished. Image: ${DATA_IMAGE}:${TAG}-logs"
        }
    }
}
