// pipelines/Jenkinsfile.training
pipeline {
    agent any
    
    environment {
        BASE_IMAGE = 'hamzachaieb01/ml-pipeline'
        DATA_IMAGE = 'hamzachaieb01/ml-data'
        MODEL_IMAGE = 'hamzachaieb01/ml-model'
        TAG = 'latest'
        MLFLOW_TRACKING_URI = 'http://mlflow:5000'
        WORKSPACE_SAFE = sh(script: 'echo "${WORKSPACE}" | sed "s/ /\\ /g"', returnStdout: true).trim()
    }
    
    options {
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
    }
    
    stages {
        // Previous stages remain the same...
        
        stage('Train Model') {
            steps {
                script {
                    try {
                        // Create data container
                        sh """
                            docker create --name data_container ${DATA_IMAGE}:${TAG}
                        """
                        
                        // Create and start model trainer container
                        sh """
                            docker run -d --name model_trainer \
                                -e MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI} \
                                --volumes-from data_container \
                                ${BASE_IMAGE}:${TAG} \
                                tail -f /dev/null
                            
                            docker exec model_trainer python -m main train_model
                            docker exec model_trainer python -m main evaluate_model
                            docker exec model_trainer python -m main save_model
                        """
                        
                        // Get training timestamp
                        def timestamp = sh(script: 'date +%Y%m%d_%H%M%S', returnStdout: true).trim()
                        
                        // First try to get metrics from logs since we can see them there
                        def accuracy = sh(
                            script: '''
                                docker logs model_trainer 2>&1 | grep "Model Accuracy:" | tail -1 | awk '{print $3}'
                            ''',
                            returnStdout: true
                        ).trim()
                        
                        // Fallback to metrics file if log parsing fails
                        if (!accuracy) {
                            accuracy = sh(
                                script: '''
                                    docker exec model_trainer cat /workspace/model_metrics.txt 2>/dev/null | \
                                    grep "Accuracy:" | awk '{print $2}' || echo "0.0"
                                ''',
                                returnStdout: true
                            ).trim()
                        }
                        
                        // Create and push model images with metrics
                        sh """
                            # Commit container with metrics
                            docker commit \
                                -c 'LABEL training.timestamp=${timestamp}' \
                                -c 'LABEL model.accuracy=${accuracy}' \
                                model_trainer ${MODEL_IMAGE}:${TAG}
                            
                            # Create accuracy tag
                            docker tag ${MODEL_IMAGE}:${TAG} ${MODEL_IMAGE}:accuracy-${accuracy}
                            docker tag ${MODEL_IMAGE}:${TAG} ${MODEL_IMAGE}:${timestamp}
                            
                            # Push all tags
                            docker push ${MODEL_IMAGE}:${TAG}
                            docker push ${MODEL_IMAGE}:accuracy-${accuracy}
                            docker push ${MODEL_IMAGE}:${timestamp}
                            
                            echo "âœ… Training complete. Images pushed:"
                            echo "- ${MODEL_IMAGE}:${TAG}"
                            echo "- ${MODEL_IMAGE}:accuracy-${accuracy}"
                            echo "- ${MODEL_IMAGE}:${timestamp}"
                            echo "\\nModel Metrics:"
                            echo "accuracy=${accuracy}"
                            
                            # Save metrics to build artifacts
                            mkdir -p metrics
                            echo "accuracy=${accuracy}" > metrics/model_metrics.txt
                        """
                        
                        // Archive metrics
                        archiveArtifacts artifacts: 'metrics/*.txt', fingerprint: true
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error "Model training failed: ${e.message}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            sh '''
                docker rm -f model_trainer || true
                docker rm -f data_container || true
                docker logout
                docker system prune -f
            '''
            cleanWs()
        }
        success {
            echo "Training pipeline completed successfully"
        }
        failure {
            echo "Training pipeline failed"
        }
    }
}
