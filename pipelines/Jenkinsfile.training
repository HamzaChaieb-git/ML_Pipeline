pipeline {
    agent any
    
    parameters {
        string(name: 'VERSION', defaultValue: 'latest', description: 'Version tag for the image')
        string(name: 'DATA_IMAGE', defaultValue: 'hamzachaieb01/ml-data:latest-logs', description: 'Data image to use')
    }
    
    environment {
        BASE_IMAGE = 'hamzachaieb01/ml-pipeline'
        MODEL_IMAGE = 'hamzachaieb01/ml-model'
        TAG = 'latest'
        WORKSPACE_SAFE = sh(script: 'echo "${WORKSPACE}" | sed "s/ /\\ /g"', returnStdout: true).trim()
    }
    
    options {
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
    }
    
    stages {
        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', 
                                usernameVariable: 'DOCKER_USERNAME', 
                                passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                }
            }
        }
        
        stage('Pull Images') {
            steps {
                script {
                    sh """
                        docker pull ${BASE_IMAGE}:${TAG}
                        docker pull ${DATA_IMAGE}
                    """
                }
            }
        }
        
        stage('Train Model') {
            steps {
                script {
                    def modelImageLogs = "${env.MODEL_IMAGE}:${env.VERSION}-logs"
                    try {
                        sh """
                            # Create data container using the passed DATA_IMAGE
                            docker create --name data_container ${DATA_IMAGE}
                            
                            # Create model trainer container and ensure /app directory exists
                            docker run -d --name model_trainer \
                                -v ${WORKSPACE_SAFE}/metrics:/app/metrics \
                                --volumes-from data_container \
                                ${BASE_IMAGE}:${TAG} \
                                tail -f /dev/null
                            
                            # Create /app directory if it doesnâ€™t exist and ensure proper permissions
                            docker exec model_trainer mkdir -p /app /app/metrics
                            docker exec model_trainer chmod 777 /app /app/metrics
                            
                            # Train model and capture output
                            docker exec model_trainer sh -c "python -u -m main train_model > /app/train_output.txt 2>&1"
                            
                            # Wait to ensure output is written
                            sleep 10
                            
                            # Check if train_output.txt exists inside the container
                            if ! docker exec model_trainer test -f /app/train_output.txt; then
                                echo "ERROR: train_output.txt not found in /app/. Checking container logs..."
                                docker logs model_trainer > train_logs.txt 2>&1 || echo "Failed to save logs to train_logs.txt"
                                exit 1
                            fi
                            
                            if docker exec model_trainer test ! -s /app/train_output.txt; then
                                echo "ERROR: train_output.txt is empty in /app/"
                                exit 1
                            fi
                            
                            # Get the run ID from training output (optional)
                            RUN_ID=\$(docker exec model_trainer grep 'MLflow run ID:' /app/train_output.txt | awk '{print \$NF}' || echo 'no_run_id')
                            echo "Training Run ID (if applicable): \$RUN_ID"
                            
                            # Evaluate model
                            docker exec model_trainer sh -c "python -u -m main evaluate_model > /app/model_output.txt 2>&1"
                            
                            # Save model
                            docker exec model_trainer python -m main save_model
                            
                            # Save logs and metrics to image
                            docker commit model_trainer ${modelImageLogs}
                            docker push ${modelImageLogs}
                        """
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error "Model training failed: ${e.message}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            sh '''
                docker rm -f model_trainer || true
                docker rm -f data_container || true
                docker logout
                docker system prune -f
                rm -f model_output.txt train_output.txt train_logs.txt
            '''
            cleanWs()
        }
        success {
            echo "Training pipeline completed successfully"
        }
        failure {
            echo "Training pipeline failed"
        }
    }
}
