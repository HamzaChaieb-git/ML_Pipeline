stage('Train Model') {
    steps {
        script {
            try {
                sh """
                    # Create data container
                    docker create --name data_container ${DATA_IMAGE}:${TAG}
                    
                    # Create model trainer container and ensure /app directory exists
                    docker run -d --name model_trainer \
                        --volumes-from data_container \
                        ${BASE_IMAGE}:${TAG} \
                        tail -f /dev/null
                    
                    # Create /app directory if it doesnâ€™t exist and ensure proper permissions
                    docker exec model_trainer mkdir -p /app
                    docker exec model_trainer chmod 777 /app
                    
                    # Train model and capture output, with verbose logging
                    docker exec model_trainer sh -c "python -u -m main train_model > /app/train_output.txt 2>&1"
                    
                    # Wait longer to ensure output is written
                    sleep 10
                    
                    # Check if train_output.txt exists inside the container
                    if ! docker exec model_trainer test -f /app/train_output.txt; then
                        echo "ERROR: train_output.txt not found in /app/ inside the container. Checking container logs..."
                        docker logs model_trainer > train_logs.txt 2>&1 || echo "Failed to save logs to train_logs.txt"
                        exit 1
                    fi
                    
                    # Check if train_output.txt is empty inside the container
                    if docker exec model_trainer test ! -s /app/train_output.txt; then
                        echo "ERROR: train_output.txt is empty in /app/ inside the container"
                        exit 1
                    fi
                    
                    # Get the run ID from training output for logging (optional, no MLflow)
                    RUN_ID=\$(docker exec model_trainer grep 'MLflow run ID:' /app/train_output.txt | awk '{print \$NF}' || echo 'no_run_id')
                    echo "Training Run ID (if applicable): \$RUN_ID"
                    
                    # Evaluate model
                    docker exec model_trainer sh -c "python -u -m main evaluate_model > /app/model_output.txt 2>&1"
                    
                    # Save model
                    docker exec model_trainer python -m main save_model
                    
                    # Save logs and metrics to image
                    docker commit model_trainer ${MODEL_IMAGE}:${TAG}-logs
                    docker push ${MODEL_IMAGE}:${TAG}-logs
                """
            } catch (Exception e) {
                currentBuild.result = 'FAILURE'
                error "Model training failed: ${e.message}"
            }
        }
    }
}
