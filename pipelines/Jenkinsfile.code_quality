pipeline {
    agent any
    
    environment {
        BASE_IMAGE = 'hamzachaieb01/ml-pipeline'
        QUALITY_IMAGE = 'hamzachaieb01/ml-quality'
        TAG = 'latest'
        WORKSPACE_SAFE = sh(script: 'echo "${WORKSPACE}" | sed "s/ /\\ /g"', returnStdout: true).trim()
    }
    
    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
    }
    
    stages {
        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                }
            }
        }
        
        stage('Pull Base Image') {
            steps {
                retry(3) {
                    sh 'docker pull ${BASE_IMAGE}:${TAG}'
                }
            }
        }
        
        stage('Code Quality Checks') {
            steps {
                script {
                    try {
                        sh 'mkdir -p quality_reports'
                        
                        # Run Flake8, Black, and Bandit, capturing output to logs
                        docker run --name quality_checker \
                            -v "${WORKSPACE}":/workspace \
                            -w /workspace \
                            --network ml_network \
                            ${BASE_IMAGE}:${TAG} \
                            bash -c "flake8 . > /app/flake8_report.txt 2>&1 && \
                                    black --check . > /app/black_report.txt 2>&1 && \
                                    bandit -r . -f txt > /app/bandit_report.txt 2>&1"
                        
                        # Save quality reports in new image
                        docker commit quality_checker ${QUALITY_IMAGE}:${TAG}-logs
                        docker push ${QUALITY_IMAGE}:${TAG}-logs
                        
                        echo "Quality reports saved to image: ${QUALITY_IMAGE}:${TAG}-logs"
                    } catch (Exception e) {
                        echo "Error during quality checks: ${e.message}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('Analyze Reports') {
            steps {
                script {
                    sh '''#!/bin/bash
                        echo "=== Flake8 Results ==="
                        if [ -f quality_reports/flake8_report.txt ]; then
                            cat quality_reports/flake8_report.txt
                        else
                            echo "No Flake8 issues found"
                        fi
                        
                        echo -e "\\n=== Black Results ==="
                        if [ -f quality_reports/black_report.txt ]; then
                            cat quality_reports/black_report.txt
                        else
                            echo "No Black issues found"
                        fi
                        
                        echo -e "\\n=== Bandit Results ==="
                        if [ -f quality_reports/bandit_report.txt ]; then
                            cat quality_reports/bandit_report.txt
                        else
                            echo "No Bandit issues found"
                        fi
                    '''
                }
            }
        }
    }
    
    post {
        always {
            sh '''#!/bin/bash
                docker rm -f quality_checker || true
                docker logout
                docker system prune -f
            '''
            
            archiveArtifacts artifacts: 'quality_reports/**/*', 
                           allowEmptyArchive: true,
                           fingerprint: true
            
            cleanWs()
        }
        success {
            echo "Code quality pipeline completed successfully"
        }
        unstable {
            echo "Code quality checks found issues, but pipeline completed"
        }
        failure {
            echo "Code quality pipeline failed"
        }
    }
}
