// pipelines/Jenkinsfile.code_quality
pipeline {
    agent any
    
    environment {
        BASE_IMAGE = 'hamzachaieb01/ml-pipeline'
        QUALITY_IMAGE = 'hamzachaieb01/ml-quality'
        TAG = 'latest'
    }
    
    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
    }
    
    stages {
        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                }
            }
        }
        
        stage('Pull Base Image') {
            steps {
                retry(3) {
                    sh 'docker pull ${BASE_IMAGE}:${TAG}'
                }
            }
        }
        
        stage('Code Quality Checks') {
            steps {
                script {
                    try {
                        // Create workspace for reports
                        sh 'mkdir -p quality_reports'
                        
                        // Run Flake8
                        sh '''
                            docker run --name flake8_check -w /app ${BASE_IMAGE}:${TAG} \
                                flake8 --output-file=flake8_report.txt .
                            docker cp flake8_check:/app/flake8_report.txt quality_reports/
                            docker rm flake8_check
                        '''
                        
                        // Run Black
                        sh '''
                            docker run --name black_check -w /app ${BASE_IMAGE}:${TAG} \
                                black --check . > quality_reports/black_report.txt 2>&1 || true
                            docker rm black_check
                        '''
                        
                        // Run Bandit
                        sh '''
                            docker run --name bandit_check -w /app ${BASE_IMAGE}:${TAG} \
                                bandit -r . -f txt -o bandit_report.txt
                            docker cp bandit_check:/app/bandit_report.txt quality_reports/
                            docker rm bandit_check
                        '''
                        
                        // Create quality image with reports
                        sh '''
                            # Create container for reports
                            docker create --name quality_container ${BASE_IMAGE}:${TAG}
                            
                            # Copy reports
                            docker cp quality_reports/. quality_container:/app/quality_reports/
                            
                            # Commit and push
                            docker commit quality_container ${QUALITY_IMAGE}:${TAG}
                            docker tag ${QUALITY_IMAGE}:${TAG} ${QUALITY_IMAGE}:$(date +%Y%m%d)
                            
                            # Push images
                            docker push ${QUALITY_IMAGE}:${TAG}
                            docker push ${QUALITY_IMAGE}:$(date +%Y%m%d)
                        '''
                    } catch (Exception e) {
                        echo "Error during quality checks: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }
        
        stage('Analyze Reports') {
            steps {
                script {
                    sh '''
                        echo "=== Flake8 Results ==="
                        cat quality_reports/flake8_report.txt || echo "No Flake8 report found"
                        
                        echo "\\n=== Black Results ==="
                        cat quality_reports/black_report.txt || echo "No Black report found"
                        
                        echo "\\n=== Bandit Results ==="
                        cat quality_reports/bandit_report.txt || echo "No Bandit report found"
                    '''
                }
            }
        }
    }
    
    post {
        always {
            sh '''
                docker rm -f quality_container || true
                docker rm -f flake8_check black_check bandit_check || true
                docker logout
                docker system prune -f
            '''
            
            archiveArtifacts artifacts: 'quality_reports/**/*', 
                           allowEmptyArchive: true,
                           fingerprint: true
            
            cleanWs()
        }
        success {
            echo "Code quality pipeline completed successfully"
            echo "Quality reports available in image: ${QUALITY_IMAGE}:${TAG}"
        }
        failure {
            echo "Code quality pipeline failed"
        }
    }
}
