stage('Process Data and Train Model') {
    steps {
        script {
            try {
                sh """
                    docker run -d \
                        --name model_trainer \
                        --network mlflow_net \
                        -e MLFLOW_TRACKING_URI=http://localhost:5001 \
                        -e MLFLOW_EXPERIMENT_NAME=churn_prediction \
                        -v "${WORKSPACE_SAFE}/mlflow_data/database":/mlflow_data/database \
                        -v "${WORKSPACE_SAFE}/mlflow_data/artifacts":/mlflow_data/artifacts \
                        ${BASE_IMAGE}:${TAG} \
                        tail -f /dev/null
                        
                    docker exec model_trainer bash -c "
                        mkdir -p /app && \
                        mkdir -p /app/mlruns && \
                        chmod -R 777 /app /mlflow_data
                    "
                    
                    # Process data
                    docker exec -e MLFLOW_TRACKING_URI=http://localhost:5001 \
                        model_trainer python -u -m main prepare_data > /app/data_output.txt 2>&1
                    
                    # Train model
                    docker exec -e MLFLOW_TRACKING_URI=http://localhost:5001 \
                        -e MLFLOW_EXPERIMENT_NAME=churn_prediction \
                        model_trainer python -u -m main train_model > /app/train_output.txt 2>&1
                    
                    sleep 10
                    
                    # Verify output files
                    if ! docker exec model_trainer test -f /app/train_output.txt; then
                        echo "ERROR: train_output.txt not found"
                        docker logs model_trainer > train_logs.txt 2>&1 || echo "Failed to save logs"
                        exit 1
                    fi
                    
                    # Get MLflow run ID
                    RUN_ID=\$(docker exec model_trainer grep 'MLflow run ID:' /app/train_output.txt | awk '{print \$NF}' || echo 'no_run_id')
                    echo "Training Run ID: \$RUN_ID"
                    
                    # Evaluate model
                    docker exec -e MLFLOW_TRACKING_URI=http://localhost:5001 \
                        -e MLFLOW_EXPERIMENT_NAME=churn_prediction \
                        model_trainer python -u -m main evaluate_model > /app/model_output.txt 2>&1
                    
                    # Save model
                    docker exec -e MLFLOW_TRACKING_URI=http://localhost:5001 \
                        model_trainer python -m main save_model
                    
                    # Commit and push updated image (optional)
                    docker commit model_trainer ${BASE_IMAGE}:${TAG}-final
                    docker push ${BASE_IMAGE}:${TAG}-final
                    
                    # Cleanup
                    docker rm -f model_trainer || true
                """
            } catch (Exception e) {
                currentBuild.result = 'FAILURE'
                error "Pipeline failed: ${e.message}"
            }
        }
    }
}
