pipeline {
    agent any
    
    environment {
        EMAIL_TO = 'hitthetarget735@gmail.com'
        QUALITY_IMAGE = 'hamzachaieb01/ml-quality'
        DATA_IMAGE = 'hamzachaieb01/ml-data'
        MODEL_IMAGE = 'hamzachaieb01/ml-model'
        BUILD_VERSION = "${BUILD_NUMBER}-${new Date().format('yyyyMMdd')}"
        DOCKER_CREDENTIALS = credentials('docker-hub-credentials')
    }
    
    options {
        timeout(time: 4, unit: 'HOURS')
        disableConcurrentBuilds()
    }
    
    stages {
        stage('Docker Login') {
            steps {
                script {
                    env.FAILED_STAGE_NAME = 'Docker Login'
                    sh 'echo $DOCKER_CREDENTIALS_PSW | docker login -u $DOCKER_CREDENTIALS_USR --password-stdin'
                }
            }
        }
        
        stage('Code Quality Pipeline') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    script {
                        env.FAILED_STAGE_NAME = 'Code Quality Pipeline'
                        def qualityBuild = build job: 'Code Quality Pipeline',
                            propagate: false,
                            wait: true
                            
                        if (qualityBuild.result != 'SUCCESS') {
                            echo "Code quality checks failed with result: ${qualityBuild.result}"
                            input message: 'Code quality checks failed. Continue anyway?', ok: 'Yes'
                        } else {
                            echo "Code quality pipeline completed successfully"
                        }
                    }
                }
            }
        }
        
        stage('Data Pipeline') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    script {
                        env.FAILED_STAGE_NAME = 'Data Pipeline'
                        def dataBuild = build job: 'Data Pipeline',
                            parameters: [
                                string(name: 'VERSION', value: "${BUILD_VERSION}")
                            ],
                            propagate: true
                        echo "Data pipeline completed with result: ${dataBuild.result}"
                    }
                }
            }
        }
        
        stage('Training Pipeline') {
            when {
                expression { currentBuild.result != 'FAILURE' }
            }
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    script {
                        env.FAILED_STAGE_NAME = 'Training Pipeline'
                        def trainingBuild = build job: 'Training Pipeline',
                            parameters: [
                                string(name: 'VERSION', value: "${BUILD_VERSION}"),
                                string(name: 'DATA_IMAGE', value: "${DATA_IMAGE}:${BUILD_VERSION}-logs")
                            ],
                            propagate: true
                        archiveArtifacts artifacts: 'metrics/*.json', fingerprint: true, allowEmptyArchive: true
                        echo "Training pipeline completed with result: ${trainingBuild.result}"
                    }
                }
            }
        }
        
        stage('Verify Images') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    script {
                        env
