pipeline {
    agent any
    
    environment {
        BASE_IMAGE = 'hamzachaieb01/ml-pipeline'
        DATA_IMAGE = 'hamzachaieb01/ml-data'
        MODEL_IMAGE = 'hamzachaieb01/ml-model'
        TAG = 'latest'
        WORKSPACE_SAFE = sh(script: "echo '${WORKSPACE}' | sed 's/ /\\\\ /g'", returnStdout: true).trim()
        MLFLOW_TRACKING_URI = 'http://mlflow_server:5001'
        EXPERIMENT_NAME = 'churn_prediction'
        MLFLOW_DB_DIR = "${WORKSPACE_SAFE}/mlflow_data"
    }
    
    options {
        timeout(time: 2, unit: 'HOURS')
        disableConcurrentBuilds()
    }
    
    stages {
        stage('Setup MLflow') {
            steps {
                script {
                    // Cleanup
                    sh '''
                        docker rm -f mlflow_server model_trainer data_container || true
                        docker network rm mlflow_net || true
                        rm -rf ${WORKSPACE}/mlflow_data/* || true
                    '''
                    
                    // Setup
                    sh """
                        docker network create mlflow_net || true
                        mkdir -p "${MLFLOW_DB_DIR}"
                        chmod 777 "${MLFLOW_DB_DIR}"
                    """
                    
                    // Start MLflow with debug output
                    sh """
                        docker run -d \
                            --name mlflow_server \
                            --network mlflow_net \
                            -p 5001:5001 \
                            -v "${MLFLOW_DB_DIR}":/mlflow_data \
                            ${BASE_IMAGE}:${TAG} \
                            bash -c "mlflow server \
                                --backend-store-uri sqlite:///mlflow_data/mlflow.db \
                                --default-artifact-root /mlflow_data/artifacts \
                                --host 0.0.0.0 \
                                --port 5001 \
                                --workers 2"
                    """
                    
                    // Verify MLflow
                    sh '''
                        echo "Waiting for MLflow server..."
                        sleep 10
                        if ! curl -s http://localhost:5001/health >/dev/null; then
                            echo "MLflow server failed to start"
                            docker logs mlflow_server
                            exit 1
                        fi
                    '''
                }
            }
        }

        stage('Train Model') {
            steps {
                script {
                    try {
                        // Setup containers
                        sh """
                            # Setup data container
                            docker create --name data_container \
                                --network mlflow_net \
                                ${DATA_IMAGE}:${TAG}
                            
                            # Setup model trainer
                            docker run -d --name model_trainer \
                                --network mlflow_net \
                                -e MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI} \
                                -e MLFLOW_EXPERIMENT_NAME=${EXPERIMENT_NAME} \
                                -v "${MLFLOW_DB_DIR}":/mlflow_data \
                                --volumes-from data_container \
                                ${BASE_IMAGE}:${TAG} \
                                tail -f /dev/null
                            
                            # Create required directories
                            docker exec model_trainer mkdir -p /app/mlruns /mlflow_data/artifacts
                            docker exec model_trainer chmod -R 777 /app /mlflow_data
                        """
                        
                        // Run training with explicit MLflow setup
                        sh """
                            docker exec \
                                -e MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI} \
                                -e MLFLOW_EXPERIMENT_NAME=${EXPERIMENT_NAME} \
                                model_trainer python -c "
import mlflow
import os
import sys

# Setup MLflow experiment
experiment_name = os.getenv('MLFLOW_EXPERIMENT_NAME', 'churn_prediction')
mlflow.set_experiment(experiment_name)

# Run the training script
with mlflow.start_run():
    mlflow.log_param('model_type', 'xgboost')
    
    # Import and run main
    sys.path.append('/app')
    import main
    main.run_full_pipeline('churn-bigml-80.csv', 'churn-bigml-20.csv')
"
                        """
                        
                        // Save and push model
                        sh """
                            docker commit model_trainer ${MODEL_IMAGE}:${TAG}-mlflow
                            docker push ${MODEL_IMAGE}:${TAG}-mlflow
                        """
                    } catch (Exception e) {
                        echo "Training failed: ${e.message}"
                        sh 'docker logs model_trainer'
                        throw e
                    }
                }
            }
        }
        
        stage('Evaluate Model') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    script {
                        sh '''
                            echo "=== Model Evaluation Results ==="
                            docker exec \
                                -e MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI} \
                                model_trainer python -c "
import mlflow
from mlflow.tracking import MlflowClient

try:
    client = MlflowClient()
    experiment = client.get_experiment_by_name('${EXPERIMENT_NAME}')
    
    if experiment:
        runs = client.search_runs(experiment_ids=[experiment.experiment_id])
        if runs:
            run = runs[0]
            print(f'\\nRun ID: {run.info.run_id}')
            print(f'Status: {run.info.status}')
            print('\\nMetrics:')
            for key, value in run.data.metrics.items():
                print(f'{key}: {value:.4f}')
        else:
            print('No runs found')
    else:
        print('Experiment not found')
except Exception as e:
    print(f'Error: {str(e)}')
"
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            sh """
                docker rm -f model_trainer data_container || true
                docker logout || true
                docker system prune -f || true
                
                if [ -d "${MLFLOW_DB_DIR}" ]; then
                    cd "${WORKSPACE_SAFE}" && tar -czf mlflow_artifacts.tar.gz -C "${MLFLOW_DB_DIR}" . || true
                fi
            """
            
            archiveArtifacts artifacts: 'mlflow_artifacts.tar.gz', allowEmptyArchive: true
        }
        success {
            echo "Pipeline completed successfully. MLflow UI available at http://localhost:5001"
        }
        failure {
            sh 'docker logs mlflow_server || true'
            sh 'docker logs model_trainer || true'
            echo "Pipeline failed. Check logs for details."
        }
    }
