name: ML Pipeline CI/CD Workflow

on:
  push:
    branches:
      - main

jobs:
  build-and-run:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: docker compose build

      - name: Start services
        run: |
          docker compose up -d
          echo "Waiting for services to start (30 seconds)..."
          sleep 30
          echo "Container status:"
          docker compose ps

      - name: Check FastAPI health
        run: |
          for i in {1..5}; do
            echo "Attempt $i: Checking FastAPI health..."
            if curl -s http://localhost:8000/health | grep -q "healthy"; then
              echo "FastAPI is healthy!"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "FastAPI health check failed after 5 attempts"
              docker compose logs fastapi
              exit 1
            fi
            echo "Waiting 5 seconds before next attempt..."
            sleep 5
          done

      - name: Check Streamlit
        run: |
          for i in {1..5}; do
            if docker compose logs streamlit | grep -q "You can now view your Streamlit app in your browser"; then
              echo "Streamlit is running properly"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "Streamlit server check failed after 5 attempts, showing logs:"
              docker compose logs streamlit
              exit 1
            fi
            echo "Waiting 5 seconds before next attempt..."
            sleep 5
          done

      - name: Check MLflow
        run: |
          for i in {1..5}; do
            if docker compose logs mlflow | grep -q "Listening at:"; then
              echo "MLflow is running properly"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "MLflow server check failed after 5 attempts, showing logs:"
              docker compose logs mlflow
              exit 1
            fi
            echo "Waiting 5 seconds before next attempt..."
            sleep 5
          done

      - name: Verify Pipeline execution
        run: |
          echo "Checking pipeline execution status..."
          PIPELINE_STATUS=$(docker inspect ml_pipeline-pipeline-1 --format='{{.State.ExitCode}}')
          if [ "$PIPELINE_STATUS" -eq 0 ]; then
            echo "Pipeline executed successfully"
            docker compose logs pipeline
          else
            echo "Pipeline execution failed with exit code $PIPELINE_STATUS, showing logs:"
            docker compose logs pipeline
            exit 1
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-artifacts
          path: |
            ./artifacts/
            ./mlflow.db
          if-no-files-found: warn

      - name: Expose services with ngrok using YAML config (5 minutes total)
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          echo "Installing ngrok to expose MLflow and Streamlit using YAML config..."

          # Install ngrok
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install -y ngrok
          ngrok authtoken $NGROK_AUTH_TOKEN
          
          # Wait for services to be fully ready (additional 10 seconds)
          echo "Waiting an additional 10 seconds for services to stabilize..."
          sleep 10

          # Start all tunnels defined in ngrok.yml, ensuring at least one tunnel is defined
          echo "Starting ngrok tunnels using configuration file..."
          if [ ! -f ngrok.yml ]; then
            echo "Error: ngrok.yml configuration file not found in the repository root."
            exit 1
          fi
          ngrok start --all > /dev/null 2>&1 &
          sleep 20  # Wait for tunnels to stabilize

          # Check ngrok tunnels and get URLs
          echo "Raw ngrok tunnels:"
          curl -s http://localhost:4040/api/tunnels
          MLFLOW_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels | map(select(.config.addr == "http://localhost:5001"))[0].public_url')
          STREAMLIT_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels | map(select(.config.addr == "http://localhost:8501"))[0].public_url')
          
          # Verify URLs and handle ngrok free plan limitation or configuration errors
          if [ "$MLFLOW_URL" = "null" ] && [ "$STREAMLIT_URL" = "null" ]; then
            echo "Error: Both ngrok URLs are null. This may indicate a free plan limitation, misconfiguration, or missing tunnels in ngrok.yml. Showing detailed logs:"
            docker compose logs mlflow
            docker compose logs streamlit
            # Try to debug further by checking ngrok status and configuration
            echo "Checking ngrok status..."
            curl -s http://localhost:4040/status
            echo "Checking ngrok.yml content:"
            cat ngrok.yml || echo "ngrok.yml is empty or unreadable"
            exit 1
          elif [ "$MLFLOW_URL" = "null" ]; then
            echo "Warning: MLflow tunnel failed. Free plan may limit to one tunnel, or ngrok.yml is misconfigured. Exposing Streamlit only for 5 minutes."
            STREAMLIT_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels | map(select(.config.addr == "http://localhost:8501"))[0].public_url')
            if [ "$STREAMLIT_URL" = "null" ]; then
              echo "Error: Streamlit ngrok URL is null. Showing detailed logs:"
              docker compose logs streamlit
              echo "Checking ngrok status..."
              curl -s http://localhost:4040/status
              exit 1
            fi
            echo "Streamlit URL: $STREAMLIT_URL"
            echo "STREAMLIT_URL=$STREAMLIT_URL" >> $GITHUB_ENV
            echo "Streamlit is running. Access it at $STREAMLIT_URL for 5 minutes."
            sleep 300  # Keep Streamlit alive for 5 minutes (300 seconds)
          elif [ "$STREAMLIT_URL" = "null" ]; then
            echo "Warning: Streamlit tunnel failed. Free plan may limit to one tunnel, or ngrok.yml is misconfigured. Exposing MLflow only for 5 minutes."
            MLFLOW_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels | map(select(.config.addr == "http://localhost:5001"))[0].public_url')
            if [ "$MLFLOW_URL" = "null" ]; then
              echo "Error: MLflow ngrok URL is null. Showing detailed logs:"
              docker compose logs mlflow
              echo "Checking ngrok status..."
              curl -s http://localhost:4040/status
              exit 1
            fi
            echo "MLflow URL: $MLFLOW_URL"
            echo "MLFLOW_URL=$MLFLOW_URL" >> $GITHUB_ENV
            echo "MLflow is running. Access it at $MLFLOW_URL for 5 minutes."
            sleep 300  # Keep MLflow alive for 5 minutes (300 seconds)
          else
            echo "Both MLflow and Streamlit tunnels are active (paid plan assumed). Access them for 5 minutes."
            echo "MLflow URL: $MLFLOW_URL"
            echo "Streamlit URL: $STREAMLIT_URL"
            echo "MLFLOW_URL=$MLFLOW_URL" >> $GITHUB_ENV
            echo "STREAMLIT_URL=$STREAMLIT_URL" >> $GITHUB_ENV
            sleep 300  # Keep both alive for 5 minutes (300 seconds)
          fi

      - name: Cleanup
        if: always()
        run: docker compose down