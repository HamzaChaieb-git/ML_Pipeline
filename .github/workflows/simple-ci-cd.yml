name: ML Pipeline CI/CD Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker images
        run: |
          docker compose build

      - name: Verify FastAPI image
        run: |
          # Test running the FastAPI container standalone with verbose output
          docker run --name test-fastapi -d ml_pipeline-fastapi
          sleep 5
          docker logs test-fastapi
          docker rm -f test-fastapi

      - name: Run Docker Compose
        run: |
          docker compose up -d
          echo "Waiting for services to start (30 seconds)..."
          sleep 30
          # Display container status for debugging
          echo "Container status:"
          docker compose ps
          
      - name: Debug container logs
        run: |
          echo "=== FastAPI container logs ==="
          docker compose logs fastapi
          echo "=== MLflow container logs ==="
          docker compose logs mlflow
      
      - name: Test FastAPI
        run: |
          # Retry the health check a few times
          for i in {1..5}; do
            echo "Attempt $i: Checking FastAPI health..."
            if curl -s http://localhost:8000/health | grep -q "healthy"; then
              echo "FastAPI is healthy!"
              break
            fi
            
            if [ $i -eq 5 ]; then
              echo "FastAPI health check failed after 5 attempts"
              docker compose logs fastapi
              exit 1
            fi
            
            echo "Waiting 5 seconds before next attempt..."
            sleep 5
          done
      
      - name: Check Streamlit logs
        run: |
          if docker compose logs streamlit | grep -q "Streamlit server is running" || docker compose logs streamlit | grep -q "You can now view your Streamlit app in your browser"; then
            echo "Streamlit is running properly"
          else
            echo "Streamlit server check failed, showing logs:"
            docker compose logs streamlit
            exit 1
          fi
      
      - name: Check MLflow logs
        run: |
          if docker compose logs mlflow | grep -q "Serving MLflow UI at" || docker compose logs mlflow | grep -q "Running on http"; then
            echo "MLflow is running properly"
          else
            echo "MLflow server check failed, showing logs:"
            docker compose logs mlflow
            exit 1
          fi
      
      - name: Run ML Pipeline
        run: |
          docker exec ml_pipeline-pipeline-1 python main.py --train-file churn-bigml-80.csv --test-file churn-bigml-20.csv --action all
      
      - name: Stop Docker Compose
        if: always()  # Run this step even if previous steps fail
        run: |
          docker compose down
