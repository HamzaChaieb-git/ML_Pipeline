name: ML Pipelines CI/CD Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      expose_services:
        description: 'Expose services with ngrok (true/false)'
        required: false
        default: 'false'

jobs:
  build-and-unit-test:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker images with Buildx
        run: |
          docker buildx build \
            --file Dockerfile.pipeline \
            --tag pipeline:latest \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
            --load \
            .

      - name: Run Black formatting check
        run: |
          echo "Running Black formatting check on specific .py files..."
          mkdir -p reports
          docker run --rm pipeline:latest black --check main.py data_processing.py model_*.py > reports/black_report.txt 2>&1 || true

      - name: Run Flake8 linting check
        run: |
          echo "Running Flake8 linting check on specific .py files..."
          docker run --rm pipeline:latest flake8 main.py data_processing.py model_*.py > reports/flake8_report.txt 2>&1 || true

      - name: Run Bandit security check
        run: |
          echo "Running Bandit security check on specific .py files..."
          docker run --rm pipeline:latest bandit -r main.py data_processing.py model_*.py > reports/bandit_report.txt 2>&1 || true

      - name: Run unit tests
        run: |
          echo "Running unit tests inside pipeline container..."
          mkdir -p reports
          docker run --rm pipeline:latest pytest tests/ -n auto -v -W ignore::DeprecationWarning -W ignore::UserWarning --junitxml=reports/pytest_report.xml | tee reports/pytest_output.txt || {
            echo "Unit tests failed. See logs above for details."
            exit 1
          }

      - name: Upload linting, security, and test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-reports
          path: reports/
          if-no-files-found: warn

      - name: Notify on unit test completion
        if: success()
        run: echo "Unit tests and code quality checks completed successfully."

  run-and-functional-test:
    runs-on: ubuntu-24.04
    needs: build-and-unit-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Start services
        run: |
          docker compose up -d
          echo "Waiting for services to start (15 seconds)..."
          sleep 15
          echo "Container status:"
          docker compose ps

      - name: Run functional tests in parallel
        run: |
          check_fastapi() {
            for i in {1..5}; do
              echo "Attempt $i: Checking FastAPI health..."
              if curl -s http://localhost:8000/health | grep -q "healthy"; then
                echo "FastAPI is healthy!"
                return 0
              fi
              if [ $i -eq 5 ]; then
                echo "FastAPI health check failed after 5 attempts"
                docker compose logs fastapi
                return 1
              fi
              echo "Waiting 2 seconds before next attempt..."
              sleep 2
            done
          }

          check_streamlit() {
            for i in {1..5}; do
              if docker compose logs streamlit | grep -q "You can now view your Streamlit app in your browser"; then
                echo "Streamlit is running properly"
                return 0
              fi
              if [ $i -eq 5 ]; then
                echo "Streamlit check failed after 5 attempts, showing logs:"
                docker compose logs streamlit
                return 1
              fi
              echo "Waiting 2 seconds before next attempt..."
              sleep 2
            done
          }

          check_mlflow() {
            for i in {1..5}; do
              if docker compose logs mlflow | grep -q "Listening at:"; then
                echo "MLflow is running properly"
                return 0
              fi
              if [ $i -eq 5 ]; then
                echo "MLflow check failed after 5 attempts, showing logs:"
                docker compose logs mlflow
                return 1
              fi
              echo "Waiting 2 seconds before next attempt..."
              sleep 2
            done
          }

          check_fastapi &
          check_streamlit &
          check_mlflow &
          wait

      - name: Upload artifacts for deploy job
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-artifacts-for-deploy
          path: |
            ./artifacts/
            ./mlflow.db
          if-no-files-found: warn

      - name: Cleanup services
        if: always()
        run: docker compose down

      - name: Notify on functional test completion
        run: echo "Functional tests and pipeline execution completed successfully."

  deploy-and-notify:
    runs-on: ubuntu-24.04
    needs: run-and-functional-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifacts from functional test job
        uses: actions/download-artifact@v4
        with:
          name: pipeline-artifacts-for-deploy

      - name: Compress and upload final artifacts
        run: |
          tar -czf pipeline-artifacts.tar.gz ./artifacts/ ./mlflow.db
          echo "Compressed artifacts into pipeline-artifacts.tar.gz"

      - name: Upload compressed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-artifacts
          path: pipeline-artifacts.tar.gz
          if-no-files-found: warn

      - name: Test ngrok exposure for MLflow and Streamlit
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          echo "Installing ngrok to expose services..."
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install -y ngrok
          ngrok authtoken $NGROK_AUTH_TOKEN

          # Start services with docker compose
          docker compose up -d
          echo "Waiting for services to start (15 seconds)..."
          sleep 15

          # Expose MLflow (port 5001) for 30 seconds
          echo "Exposing MLflow on port 5001 for 30 seconds..."
          ngrok http 5001 &  # Run ngrok in background
          sleep 5  # Wait for ngrok to establish tunnel
          MLFLOW_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          echo "MLflow URL (available for 30 seconds): $MLFLOW_URL"
          sleep 30  # Keep MLflow exposed for 30 seconds
          pkill ngrok

          # Expose Streamlit (port 8501) for 30 seconds
          echo "Exposing Streamlit on port 8501 for 30 seconds..."
          ngrok http 8501 &  # Run ngrok in background
          sleep 5  # Wait for ngrok to establish tunnel
          STREAMLIT_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          echo "Streamlit URL (available for 30 seconds): $STREAMLIT_URL"
          sleep 30  # Keep Streamlit exposed for 30 seconds
          pkill ngrok

          # Cleanup services
          docker compose down
          echo "MLFLOW_URL=$MLFLOW_URL" >> $GITHUB_ENV
          echo "STREAMLIT_URL=$STREAMLIT_URL" >> $GITHUB_ENV

      - name: Set email body
        run: |
          body="The ML Pipeline CI/CD workflow completed successfully.
          - FastAPI: Healthy
          - Streamlit: Running
          - MLflow: Running
          - Pipeline Status: Success
          Artifacts uploaded to GitHub."
          if [ -n "$MLFLOW_URL" ]; then
            body="$body
          MLflow URL: $MLFLOW_URL"
          fi
          if [ -n "$STREAMLIT_URL" ]; then
            body="$body
          Streamlit URL: $STREAMLIT_URL"
          fi
          echo "EMAIL_BODY<<EOF" >> $GITHUB_ENV
          echo "$body" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "ML Pipeline CI/CD Completed"
          to: hitthetarget735@gmail.com
          from: GitHub Actions
          body: ${{ env.EMAIL_BODY }}