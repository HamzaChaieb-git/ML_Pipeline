name: ML Pipeline CI/CD Workflow

on:
  push:
    branches:
      - main

jobs:
  build-and-run:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: docker compose build

      - name: Start services
        run: |
          docker compose up -d
          echo "Waiting for services to start (30 seconds)..."
          sleep 30
          echo "Container status:"
          docker compose ps

      - name: Check FastAPI health
        run: |
          for i in {1..5}; do
            echo "Attempt $i: Checking FastAPI health..."
            if curl -s http://localhost:8000/health | grep -q "healthy"; then
              echo "FastAPI is healthy!"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "FastAPI health check failed after 5 attempts"
              docker compose logs fastapi
              exit 1
            fi
            echo "Waiting 5 seconds before next attempt..."
            sleep 5
          done

      - name: Check Streamlit
        run: |
          if docker compose logs streamlit | grep -q "You can now view your Streamlit app in your browser"; then
            echo "Streamlit is running properly"
          else
            echo "Streamlit server check failed, showing logs:"
            docker compose logs streamlit
            exit 1
          fi

      - name: Check MLflow
        run: |
          if docker compose logs mlflow | grep -q "Listening at:"; then
            echo "MLflow is running properly"
          else
            echo "MLflow server check failed, showing logs:"
            docker compose logs mlflow
            exit 1
          fi

      - name: Verify Pipeline execution
        run: |
          echo "Checking pipeline execution status..."
          PIPELINE_STATUS=$(docker inspect ml_pipeline-pipeline-1 --format='{{.State.ExitCode}}')
          if [ "$PIPELINE_STATUS" -eq 0 ]; then
            echo "Pipeline executed successfully"
            docker compose logs pipeline
          else
            echo "Pipeline execution failed with exit code $PIPELINE_STATUS, showing logs:"
            docker compose logs pipeline
            exit 1
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-artifacts
          path: ./artifacts/
          if-no-files-found: warn

      # New step: Keep services running and expose them (for demo purposes)
      - name: Expose services with ngrok (optional)
        run: |
          echo "Installing ngrok to expose MLflow and Streamlit..."
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install -y ngrok
          ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}  # Add NGROK_AUTH_TOKEN in GitHub Secrets
          ngrok http 5001 &  # Expose MLflow
          ngrok http 8501 &  # Expose Streamlit
          sleep 10
          echo "MLflow URL: $(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')"
          echo "Streamlit URL: $(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[1].public_url')"
          echo "Services are running. Manually stop the workflow or wait for timeout (6 hours max)."
          sleep 3600  # Keep alive for 1 hour (adjust as needed, max 6 hours)

      - name: Cleanup
        if: always()
        run: docker compose down