name: ML Pipelines CI/CD Workflow

on:
  push:
    branches:
      - main

jobs:
  build-and-unit-test:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: docker compose build

      - name: Install linting and security tools
        run: |
          docker compose run --rm pipeline pip install --no-cache-dir black flake8 bandit
          mkdir -p reports  # Create reports directory

      - name: Run Black formatting check
        run: |
          echo "Running Black formatting check on .py files in root..."
          docker compose run --rm pipeline black --check *.py > reports/black_report.txt 2>&1 || true
          echo "Black check completed. Report saved to reports/black_report.txt"

      - name: Run Flake8 linting check
        run: |
          echo "Running Flake8 linting check on .py files in root..."
          docker compose run --rm pipeline flake8 *.py > reports/flake8_report.txt 2>&1 || true
          echo "Flake8 check completed. Report saved to reports/flake8_report.txt"

      - name: Run Bandit security check
        run: |
          echo "Running Bandit security check on .py files in root..."
          docker compose run --rm pipeline bandit -r *.py > reports/bandit_report.txt 2>&1 || true
          echo "Bandit check completed. Report saved to reports/bandit_report.txt"

      - name: Run unit tests
        run: |
          echo "Running unit tests inside pipeline container..."
          docker compose run --rm pipeline pytest tests/ || {
            echo "Unit tests failed. Showing logs:"
            docker compose logs pipeline
            exit 1
          }

      - name: Upload linting and security reports
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-reports
          path: reports/
          if-no-files-found: warn

      - name: Notify on unit test completion
        run: echo "Unit tests and code quality checks completed successfully."

  run-and-functional-test:
    runs-on: ubuntu-24.04
    needs: build-and-unit-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services
        run: |
          docker compose up -d
          echo "Waiting for services to start (30 seconds)..."
          sleep 30
          echo "Container status:"
          docker compose ps

      - name: Check FastAPI health (Functional Test)
        run: |
          for i in {1..5}; do
            echo "Attempt $i: Checking FastAPI health..."
            if curl -s http://localhost:8000/health | grep -q "healthy"; then
              echo "FastAPI is healthy!"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "FastAPI health check failed after 5 attempts"
              docker compose logs fastapi
              exit 1
            fi
            echo "Waiting 5 seconds before next attempt..."
            sleep 5
          done

      - name: Test FastAPI prediction endpoint (Functional Test)
        run: |
          echo "Testing FastAPI prediction endpoint..."
          curl -X POST -H "Content-Type: application/json" \
            -d '{"Total day minutes": [120.5], "Customer service calls": [3], "International plan": [0], "Total intl minutes": [10.2], "Total intl calls": [5], "Total eve minutes": [200.0], "Number vmail messages": [0], "Voice mail plan": [0]}' \
            http://localhost:8000/predict || {
              echo "FastAPI prediction test failed. Showing logs:"
              docker compose logs fastapi
              exit 1
            }

      - name: Check Streamlit (Functional Test)
        run: |
          for i in {1..5}; do
            if docker compose logs streamlit | grep -q "You can now view your Streamlit app in your browser"; then
              echo "Streamlit is running properly"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "Streamlit check failed after 5 attempts, showing logs:"
              docker compose logs streamlit
              exit 1
            fi
            echo "Waiting 5 seconds before next attempt..."
            sleep 5
          done

      - name: Check MLflow (Functional Test)
        run: |
          for i in {1..5}; do
            if docker compose logs mlflow | grep -q "Listening at:"; then
              echo "MLflow is running properly"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "MLflow check failed after 5 attempts, showing logs:"
              docker compose logs mlflow
              exit 1
            fi
            echo "Waiting 5 seconds before next attempt..."
            sleep 5
          done

      - name: Verify pipeline execution
        run: |
          echo "Checking pipeline execution status..."
          PIPELINE_STATUS=$(docker inspect ml_pipeline-pipeline-1 --format='{{.State.ExitCode}}')
          if [ "$PIPELINE_STATUS" -eq 0 ]; then
            echo "Pipeline executed successfully"
            docker compose logs pipeline
          else
            echo "Pipeline execution failed with exit code $PIPELINE_STATUS, showing logs:"
            docker compose logs pipeline
            exit 1
          fi

      - name: Notify on functional test completion
        run: echo "Functional tests and pipeline execution completed successfully."

  deploy-and-notify:
    runs-on: ubuntu-24.04
    needs: run-and-functional-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-artifacts
          path: |
            ./artifacts/
            ./mlflow.db
          if-no-files-found: warn

      - name: Expose services with ngrok (optional)
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          echo "Installing ngrok to expose services..."
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install -y ngrok
          ngrok authtoken $NGROK_AUTH_TOKEN
          ngrok http 5001 &  # MLflow
          sleep 15
          MLFLOW_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          echo "MLflow URL: $MLFLOW_URL"
          sleep 180
          pkill ngrok
          ngrok http 8501 &  # Streamlit
          sleep 15
          STREAMLIT_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          echo "Streamlit URL: $STREAMLIT_URL"
          sleep 180

      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "ML Pipeline CI/CD Completed"
          to: hitthetarget735@gmail.com
          from: GitHub Actions
          body: |
            The ML Pipeline CI/CD workflow completed successfully.
            - FastAPI: Healthy
            - Streamlit: Running
            - MLflow: Running
            - Pipeline Status: Success
            Artifacts uploaded to GitHub.

      - name: Cleanup
        if: always()
        run: docker compose down