name: ML Pipelines CI/CD Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      expose_services:
        description: 'Expose services with ngrok (true/false)'
        required: false
        default: 'false'

jobs:
  setup-dependencies:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache system dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            /home/runner/apt-cache-custom
            /home/runner/ngrok-config
          key: ${{ runner.os }}-deps-${{ hashFiles('.github/workflows/ci-cd.yml') }}
          restore-keys: ${{ runner.os }}-deps-

      - name: Install and cache system dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          mkdir -p /home/runner/apt-cache-custom /home/runner/ngrok-config
          sudo chown runner:runner /home/runner/apt-cache-custom /home/runner/ngrok-config
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt-get update
          sudo apt-get install -y ngrok jq curl --download-only -o /home/runner/apt-cache-custom/
          sudo dpkg -i /home/runner/apt-cache-custom/*.deb
          ngrok authtoken $NGROK_AUTH_TOKEN
          cp -r /home/runner/.config/ngrok/* /home/runner/ngrok-config/

  build-and-unit-test:
    runs-on: ubuntu-24.04
    needs: setup-dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile.pipeline', 'requirements.txt') }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Restore system dependencies
        run: |
          sudo dpkg -i /home/runner/apt-cache-custom/*.deb 2>/dev/null || true
          mkdir -p /home/runner/.config/ngrok
          cp -r /home/runner/ngrok-config/* /home/runner/.config/ngrok/ 2>/dev/null || true

      - name: Pull base image
        run: docker pull hamzachaieb01/ml-pipeline:latest || true

      - name: Build Docker image
        run: |
          docker buildx build \
            --file Dockerfile.pipeline \
            --tag pipeline:latest \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
            --load \
            .

      - name: Run checks and tests
        run: |
          mkdir -p reports
          docker run --rm pipeline:latest bash -c "
            black --check main.py data_processing.py model_*.py > reports/black_report.txt 2>&1 || true &
            flake8 main.py data_processing.py model_*.py > reports/flake8_report.txt 2>&1 || true &
            bandit -r main.py data_processing.py model_*.py > reports/bandit_report.txt 2>&1 || true &
            pytest tests/ -n auto -v -W ignore::DeprecationWarning -W ignore::UserWarning --junitxml=reports/pytest_report.xml | tee reports/pytest_output.txt || exit 1 &
            wait
          " || exit 1

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-reports
          path: reports/
          if-no-files-found: warn

  run-and-functional-test:
    runs-on: ubuntu-24.04
    needs: build-and-unit-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile.pipeline', 'requirements.txt') }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Restore system dependencies
        run: |
          sudo dpkg -i /home/runner/apt-cache-custom/*.deb 2>/dev/null || true
          mkdir -p /home/runner/.config/ngrok
          cp -r /home/runner/ngrok-config/* /home/runner/.config/ngrok/ 2>/dev/null || true

      - name: Start services
        run: |
          docker compose up -d
          sleep 10
          docker compose ps

      - name: Run functional tests
        run: |
          check_fastapi() { for i in {1..3}; do curl -s http://localhost:8000/health | grep -q "healthy" && echo "FastAPI healthy" && return 0 || [ $i -eq 3 ] && echo "FastAPI failed" && docker compose logs fastapi && return 1; sleep 1; done }
          check_streamlit() { for i in {1..3}; do docker compose logs streamlit | grep -q "You can now view" && echo "Streamlit running" && return 0 || [ $i -eq 3 ] && echo "Streamlit failed" && docker compose logs streamlit && return 1; sleep 1; done }
          check_mlflow() { for i in {1..3}; do docker compose logs mlflow | grep -q "Listening at:" && echo "MLflow running" && return 0 || [ $i -eq 3 ] && echo "MLflow failed" && docker compose logs mlflow && return 1; sleep 1; done }
          check_fastapi & check_streamlit & check_mlflow & wait || exit 1

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-artifacts-for-deploy
          path: |
            ./artifacts/
            ./mlflow.db
          if-no-files-found: warn

      - name: Cleanup
        if: always()
        run: docker compose down

  deploy-and-notify:
    runs-on: ubuntu-24.04
    needs: run-and-functional-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile.pipeline', 'requirements.txt') }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Restore system dependencies
        run: |
          sudo dpkg -i /home/runner/apt-cache-custom/*.deb 2>/dev/null || true
          mkdir -p /home/runner/.config/ngrok
          cp -r /home/runner/ngrok-config/* /home/runner/.config/ngrok/ 2>/dev/null || true

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: pipeline-artifacts-for-deploy

      - name: Compress and upload artifacts
        run: |
          tar -czf pipeline-artifacts.tar.gz ./artifacts/ ./mlflow.db
          echo "Compressed artifacts into pipeline-artifacts.tar.gz"

      - name: Upload compressed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-artifacts
          path: pipeline-artifacts.tar.gz
          if-no-files-found: warn

      - name: Expose MLflow and Streamlit with ngrok (sequential)
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          docker compose up -d
          sleep 10

          # Expose MLflow for 30 seconds
          echo "Exposing MLflow on port 5001 for 30 seconds..."
          ngrok http 5001 &
          sleep 5
          MLFLOW_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          echo "MLflow URL (30s): $MLFLOW_URL"
          sleep 30
          pkill ngrok

          # Wait briefly to ensure ngrok session fully terminates
          sleep 2

          # Expose Streamlit for 30 seconds
          echo "Exposing Streamlit on port 8501 for 30 seconds..."
          ngrok http 8501 &
          sleep 5
          STREAMLIT_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          echo "Streamlit URL (30s): $STREAMLIT_URL"
          sleep 30
          pkill ngrok

          docker compose down

          echo "MLFLOW_URL=$MLFLOW_URL" >> $GITHUB_ENV
          echo "STREAMLIT_URL=$STREAMLIT_URL" >> $GITHUB_ENV

      - name: Set email body
        run: |
          body="Workflow completed.\n- FastAPI: Healthy\n- Streamlit: Running\n- MLflow: Running\n- Pipeline: Success\nArtifacts uploaded."
          [ -n "$MLFLOW_URL" ] && body="$body\nMLflow URL: $MLFLOW_URL"
          [ -n "$STREAMLIT_URL" ] && body="$body\nStreamlit URL: $STREAMLIT_URL"
          echo "EMAIL_BODY<<EOF" >> $GITHUB_ENV
          echo -e "$body" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Send email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "ML Pipeline CI/CD Completed"
          to: hitthetarget735@gmail.com
          from: GitHub Actions
          body: ${{ env.EMAIL_BODY }}