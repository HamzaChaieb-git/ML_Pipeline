name: ML Pipelines CI/CD Workflow

on:
  push:
    branches:
      - main

jobs:
  code-quality-checks:
    runs-on: ubuntu-24.04
    continue-on-error: true  # Ensures the job always succeeds, allowing the workflow to continue

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 bandit black

      - name: Run Flake8 (Style Check)
        run: |
          flake8 . --max-line-length=100 --extend-exclude="tests/*,Dockerfile*" --filename="*.py" > flake8_report.txt
        continue-on-error: true  # Allow job to continue even if Flake8 finds issues

      - name: Run Bandit (Security Check)
        run: |
          bandit -r . -x "tests/*,Dockerfile*" -f txt -o bandit_report.txt
        continue-on-error: true  # Allow job to continue even if Bandit finds issues

      - name: Run Black (Formatting Check)
        run: |
          black --check . --exclude "tests/*,Dockerfile*" --diff > black_report.txt
        continue-on-error: true  # Allow job to continue even if Black finds issues

      - name: Upload Flake8 Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: flake8-report
          path: flake8_report.txt
          if-no-files-found: warn

      - name: Upload Bandit Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit_report.txt
          if-no-files-found: warn

      - name: Upload Black Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: black-report
          path: black_report.txt
          if-no-files-found: warn

  build-and-run:
    runs-on: ubuntu-24.04
    needs: code-quality-checks  # Ensure code-quality-checks runs first, but continues even if it fails

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: docker compose build

      - name: Start services
        run: |
          docker compose up -d
          echo "Waiting for services to start (30 seconds)..."
          sleep 30
          echo "Container status:"
          docker compose ps

      - name: Check FastAPI health
        run: |
          for i in {1..5}; do
            echo "Attempt $i: Checking FastAPI health..."
            if curl -s http://localhost:8000/health | grep -q "healthy"; then
              echo "FastAPI is healthy!"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "FastAPI health check failed after 5 attempts"
              docker compose logs fastapi
              exit 1
            fi
            echo "Waiting 5 seconds before next attempt..."
            sleep 5
          done

      - name: Check Streamlit
        run: |
          for i in {1..5}; do
            if docker compose logs streamlit | grep -q "You can now view your Streamlit app in your browser"; then
              echo "Streamlit is running properly"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "Streamlit server check failed after 5 attempts, showing logs:"
              docker compose logs streamlit
              exit 1
            fi
            echo "Waiting 5 seconds before next attempt..."
            sleep 5
          done

      - name: Check MLflow
        run: |
          for i in {1..5}; do
            if docker compose logs mlflow | grep -q "Listening at:"; then
              echo "MLflow is running properly"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "MLflow server check failed after 5 attempts, showing logs:"
              docker compose logs mlflow
              exit 1
            fi
            echo "Waiting 5 seconds before next attempt..."
            sleep 5
          done

      - name: Verify Pipeline execution
        run: |
          echo "Checking pipeline execution status..."
          PIPELINE_STATUS=$(docker inspect ml_pipeline-pipeline-1 --format='{{.State.ExitCode}}')
          if [ "$PIPELINE_STATUS" -eq 0 ]; then
            echo "Pipeline executed successfully"
            docker compose logs pipeline
          else
            echo "Pipeline execution failed with exit code $PIPELINE_STATUS, showing logs:"
            docker compose logs pipeline
            exit 1
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-artifacts
          path: |
            ./artifacts/
            ./mlflow.db
          if-no-files-found: warn

      - name: Expose services with ngrok sequentially (3 minutes MLflow, 3 minutes Streamlit)
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          echo "Installing ngrok to expose MLflow and Streamlit sequentially..."
          # Install ngrok
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install -y ngrok
          ngrok config add-authtoken $NGROK_AUTH_TOKEN

          # Wait for services to be fully ready (additional 10 seconds)
          echo "Waiting an additional 10 seconds for services to stabilize..."
          sleep 10

          # Expose MLflow first for 3 minutes
          echo "Starting ngrok tunnel for MLflow (port 5001)..."
          ngrok http 5001 > ngrok_mlflow.log 2>&1 &
          sleep 15  # Wait for MLflow tunnel to stabilize
           
          # Check MLflow tunnel and get URL
          echo "Raw ngrok tunnels for MLflow:"
          curl -s http://localhost:4040/api/tunnels
          MLFLOW_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels | map(select(.config.addr == "http://localhost:5001"))[0].public_url')
          
          if [ -z "$MLFLOW_URL" ] || [ "$MLFLOW_URL" = "null" ]; then
            echo "Error: MLflow ngrok URL is null or empty. Showing detailed logs:"
            cat ngrok_mlflow.log
            docker compose logs mlflow
            echo "Checking ngrok status..."
            curl -s http://localhost:4040/status
            exit 1
          fi
          echo "MLflow URL: $MLFLOW_URL"
          echo "MLFLOW_URL=$MLFLOW_URL" >> $GITHUB_ENV
          echo "MLflow is running. Access it at $MLFLOW_URL for 3 minutes."
          sleep 180  # Keep MLflow alive for 3 minutes (180 seconds)
          
          # Stop the ngrok tunnel for MLflow
          echo "Stopping ngrok tunnel for MLflow..."
          pkill ngrok
          sleep 5  # Wait for ngrok to shut down

          # Expose Streamlit second for 3 minutes
          echo "Starting ngrok tunnel for Streamlit (port 8501)..."
          ngrok http 8501 > ngrok_streamlit.log 2>&1 &
          sleep 15  # Wait for Streamlit tunnel to stabilize
          
          # Check Streamlit tunnel and get URL
          echo "Raw ngrok tunnels for Streamlit:"
          curl -s http://localhost:4040/api/tunnels
          STREAMLIT_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels | map(select(.config.addr == "http://localhost:8501"))[0].public_url')
          
          if [ -z "$STREAMLIT_URL" ] || [ "$STREAMLIT_URL" = "null" ]; then
            echo "Error: Streamlit ngrok URL is null or empty. Showing detailed logs:"
            cat ngrok_streamlit.log
            docker compose logs streamlit
            echo "Checking ngrok status..."
            curl -s http://localhost:4040/status
            exit 1
          fi
          echo "Streamlit URL: $STREAMLIT_URL"
          echo "STREAMLIT_URL=$STREAMLIT_URL" >> $GITHUB_ENV
          echo "Streamlit is running. Access it at $STREAMLIT_URL for 3 minutes."
          sleep 180  # Keep Streamlit alive for 3 minutes (180 seconds)

      - name: Cleanup
        if: always()
        run: |
          echo "Shutting down services..."
          docker compose down
          echo "Cleanup complete."

      - name: Send Email Notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          to: hitthetarget735@gmail.com  # Hardcoded recipient email
          from: ${{ secrets.EMAIL_USERNAME }}  # Use EMAIL_USERNAME as sender
          subject: "CI/CD Pipeline Status - ${{ github.repository }} (Run #${{ github.run_number }})"
          body: |
            CI/CD Pipeline Status for ${{ github.repository }} (Run #${{ github.run_number }})

            Job Status: ${{ job.status }}
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref_name }}
            Workflow: ${{ github.workflow }}

            For more details, check the workflow run at:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          server_address: smtp.gmail.com  # Hardcoded Gmail SMTP server
          server_port: 587  # Hardcoded Gmail SMTP port for TLS
          username: ${{ secrets.EMAIL_USERNAME }}  # Use EMAIL_USERNAME for SMTP
          password: ${{ secrets.EMAIL_PASSWORD }}  # Use EMAIL_PASSWORD for SMTP
          secure: true  # Use TLS